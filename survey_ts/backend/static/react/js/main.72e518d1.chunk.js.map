{"version":3,"sources":["parseSurvey.ts","DialogComponent.tsx","App.tsx","TitleComponent.tsx","RadioButtonComponent.tsx","TextFieldComponent.tsx","RatingComponent.tsx","serviceWorker.ts","index.tsx"],"names":["parseSurvey","inputJson","surveyParse","JSON","parse","decode","surveyItems","items","item","push","id","name","description","type","addTextBox","choiceOpts","addCheckBox","isFinished","DialogComponent","m","Dialog","open","openState","onClose","closeEvent","aria-labelledby","DialogTitle","title","DialogContent","DialogContentText","secondDescription","length","textFieldData","TextField","autoFocus","margin","label","fullWidth","value","onChange","textOnChange","helperText","error","DialogActions","Button","onClick","buttonOnClick","color","buttonText","survey","window","token","App","props","onUpdateUser","e","setState","user","target","onUserClick","initialItems","answer","comment","checkBoxChecked","state","openLoginWindow","onRadioRatingChange","currentState","Object","assign","itemIndex","findIndex","elem","onCommentChange","onCheckBoxChange","checked","setClose","openNotFinishedWindow","onSubmit","preventDefault","every","i","url","data","surveyId","axios","method","headers","then","response","console","log","location","catch","bind","answerOpts","split","radioOpts","opt","FormControlLabel","control","Radio","a","questionId","questionValueExpr","map","c","includes","filter","undefined","onChangeEvent","textInput","hasTextInput","saveComment","checkBoxData","isChecked","Container","component","Box","p","Paper","Typography","variant","align","Checkbox","RadioGroup","aria-label","InputLabelProps","shrink","TextFieldComponent","currentValue","alignItems","Rating","Number","size","RatingComponent","className","style","justifyContent","justifyItems","this","textAlign","gutterBottom","join","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.72e518d1.chunk.js","sourcesContent":["import { decode } from \"he\";\r\nimport {\r\n  surveyModel,\r\n  surveyQuestion,\r\n  questionType,\r\n} from \"./surveyTypes\";\r\n\r\nfunction parseSurvey(inputJson: string) {\r\n  const surveyParse = JSON.parse(decode(inputJson));\r\n\r\n  let surveyItems: surveyQuestion[] = [];\r\n  for (let item of surveyParse.items)\r\n    surveyItems.push({\r\n      id: item.id,\r\n      name: item.name,\r\n      description: item.description,\r\n      type: item.type as questionType,\r\n      addTextBox: item.addTextBox,\r\n      choiceOpts: item.choiceOpts,\r\n      addCheckBox: item.addCheckBox,\r\n    } as surveyQuestion);\r\n\r\n  const survey: surveyModel = {\r\n    id: surveyParse.id,\r\n    name: surveyParse.name,\r\n    description: surveyParse.description,\r\n    items: surveyItems,\r\n    isFinished: false,\r\n  };\r\n\r\n  return survey;\r\n}\r\n\r\nexport default parseSurvey;\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ntype textFieldDataType = {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  error: boolean;\r\n  textOnChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport type dialogComponentOpts = {\r\n  openState: boolean;\r\n  closeEvent: (e: any) => void;\r\n  title: string;\r\n  description: string;\r\n  buttonOnClick: (e: any) => void;\r\n  buttonText: string;\r\n  textFieldData?: textFieldDataType;\r\n  secondDescription?: string;\r\n};\r\n\r\nexport default function DialogComponent(m: dialogComponentOpts) {\r\n  return (\r\n    <Dialog\r\n      open={m.openState}\r\n      onClose={m.closeEvent}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">{m.title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>{m.description}</DialogContentText>\r\n        {m.secondDescription && m.secondDescription.length ? (\r\n          <DialogContentText>{m.secondDescription}</DialogContentText>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {m.textFieldData ? (\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id={m.textFieldData.id}\r\n            label={m.textFieldData.label}\r\n            fullWidth\r\n            value={m.textFieldData.value}\r\n            onChange={m.textFieldData.textOnChange}\r\n            helperText={m.textFieldData.error ? \"Неверный ввод\" : \"\"}\r\n            error={m.textFieldData.error}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={m.buttonOnClick} color=\"primary\">\r\n          {m.buttonText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\nimport parseSurvey from \"./parseSurvey\";\nimport { surveyAnswer, surveyModel } from \"./surveyTypes\";\nimport Radio from \"@material-ui/core/Radio\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport RadioButtonComponent, { radioButtonProps } from \"./RadioButtonComponent\";\nimport TitleComponent from \"./TitleComponent\";\nimport DialogComponent from \"./DialogComponent\";\nimport TextFieldComponent, {\n  textFieldComponentOpts,\n} from \"./TextFieldComponent\";\nimport RatingComponent, { ratingComponentOpts } from \"./RatingComponent\";\n\nimport axios from \"axios\";\n\nconst survey: surveyModel = parseSurvey((window as any).token);\n\ntype mainState = {\n  id: string;\n  openLoginWindow: boolean;\n  openNotFinishedWindow: boolean;\n  items: surveyAnswer[];\n  user: string;\n};\n\ntype mainProps = {\n  title?: string;\n};\n\ntype postDataType = {\n  surveyId: string;\n  items: surveyAnswer[];\n  user: string;\n  isFinished: boolean;\n};\n\nclass App extends React.Component<mainProps, mainState> {\n  constructor(props: mainProps) {\n    super(props);\n\n    this.state = {\n      id: survey.id,\n      openLoginWindow: true,\n      openNotFinishedWindow: false,\n      items: [],\n      user: \"\",\n    };\n\n    this.onRadioRatingChange = this.onRadioRatingChange.bind(this); // radiobutton value changed\n    this.onSubmit = this.onSubmit.bind(this); // submit button is clicked\n    this.setClose = this.setClose.bind(this); // popup window to be closed\n    this.onUpdateUser = this.onUpdateUser.bind(this); // the user login is entered\n    this.onUserClick = this.onUserClick.bind(this); // the user enter popup window button is clicked\n    this.onCommentChange = this.onCommentChange.bind(this); // the comment is entered\n    this.onCheckBoxChange = this.onCheckBoxChange.bind(this); // checkBox is checked\n  }\n\n  onUpdateUser = (e: any) => {\n    // if the input value has changed - update the state value\n    this.setState({ user: e.target.value });\n  };\n\n  onUserClick = () => {\n    // create default items (with empty answers and comments)\n    let initialItems: surveyAnswer[] = [];\n    for (let item of survey.items)\n      initialItems.push({\n        name: item.name,\n        description: item.description,\n        id: item.id,\n        answer: null,\n        comment: \"\",\n        type: item.type,\n        isFinished: item.type === \"text\",\n        checkBoxChecked: false,\n      });\n\n    // if the entered login is OK -> update state.items and close the popup window\n    if (this.state.user.length > 0)\n      this.setState({ openLoginWindow: false, items: initialItems });\n  };\n\n  onRadioRatingChange = (e: any) => {\n    // create new object as copy of items in current state\n    let currentState: surveyAnswer[] = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer and isFinished values for a given item\n    currentState[itemIndex].answer = e.target.value as string;\n    currentState[itemIndex].isFinished = true;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  onCommentChange = (e: any) => {\n    // create new object as copy of items in current state\n    let currentState: surveyAnswer[] = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer value for a given item\n    currentState[itemIndex].comment = e.target.value;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  onCheckBoxChange = (e: any) => {\n    // create new object as copy of items in current state\n    let currentState: surveyAnswer[] = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer value for a given item\n    currentState[itemIndex].checkBoxChecked = e.target.checked;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  setClose = () => {\n    // close the popup window\n    this.setState({ openNotFinishedWindow: false });\n  };\n\n  onSubmit = (e: any) => {\n    e.preventDefault();\n\n    // if all questions are finished - post data to server\n    if (\n      this.state.items.every((i) => {\n        return i.isFinished || i.checkBoxChecked;\n      })\n    ) {\n      const url = \"/id=\" + survey.id;\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      const data: postDataType = {\n        surveyId: survey.id,\n        items: this.state.items,\n        user: this.state.user,\n        isFinished: true,\n      };\n      axios({\n        method: \"post\",\n        url: url,\n        data: data,\n        headers: headers,\n      })\n        .then((response) => {\n          console.log(response.data);\n          (window as any).location = \"/answer\";\n        })\n        .catch((error) => {\n          console.log(error);\n        }); // otherwise - open popup window\n    } else this.setState({ openNotFinishedWindow: true });\n  };\n\n  render() {\n    // main array to store questions (items) data\n    let items: any[] = [];\n\n    // main loop to fill in the items array\n    for (let item of survey.items) {\n      // in case of single/multiple choice questions - answer options are proceeded\n      const answerOpts =\n        item.type === \"single-choice\" && item.choiceOpts\n          ? item.choiceOpts.split(\"; \")\n          : [];\n\n      // add elements for answer options - if none are given, no elements will be added\n      let radioOpts: any[] = [];\n      for (let opt of answerOpts)\n        radioOpts.push(\n          <FormControlLabel value={opt} control={<Radio />} label={opt} />\n        );\n\n      // process \"single-choice\" question type\n      if (item.type === \"single-choice\" && answerOpts.length > 0) {\n        const a: radioButtonProps = {\n          title: item.id + \") \" + item.name,\n          description: item.description,\n          questionId: item.id,\n          questionValueExpr: this.state.items.map((c) => c.id).includes(item.id)\n            ? this.state.items.filter((c) => {\n                return c.id === item.id;\n              })[0].answer\n            : undefined,\n          onChangeEvent: this.onRadioRatingChange,\n          radioOpts: radioOpts,\n          textInput: {\n            hasTextInput: item.addTextBox,\n            saveComment: this.onCommentChange,\n          },\n          checkBoxData: {\n            addCheckBox: item.addCheckBox,\n            isChecked: this.state.items.map((c) => c.id).includes(item.id)\n              ? this.state.items.filter((c) => {\n                  return c.id === item.id;\n                })[0].checkBoxChecked\n              : undefined,\n            onChange: this.onCheckBoxChange,\n          },\n        };\n\n        items.push(RadioButtonComponent(a));\n      }\n\n      // process \"text\" question type\n      if (item.type === \"text\") {\n        const a: textFieldComponentOpts = {\n          title: item.id + \") \" + item.name,\n          description: item.description,\n          id: item.id,\n          onCommentChange: this.onCommentChange,\n        };\n        items.push(TextFieldComponent(a));\n      }\n\n      // process \"rating\" question type\n      if (item.type === \"rating\") {\n        const a: ratingComponentOpts = {\n          title: item.id + \") \" + item.name,\n          description: item.description,\n          questionId: item.id,\n          currentValue: this.state.items.map((c) => c.id).includes(item.id)\n            ? this.state.items.filter((c) => {\n                return c.id === item.id;\n              })[0].answer\n            : undefined,\n          onChangeEvent: this.onRadioRatingChange,\n          textInput: {\n            hasTextInput: item.addTextBox,\n            saveComment: this.onCommentChange,\n          },\n          checkBoxData: {\n            addCheckBox: item.addCheckBox,\n            isChecked: this.state.items.map((c) => c.id).includes(item.id)\n              ? this.state.items.filter((c) => {\n                  return c.id === item.id;\n                })[0].checkBoxChecked\n              : undefined,\n\n            onChange: this.onCheckBoxChange,\n          },\n        };\n\n        items.push(RatingComponent(a));\n      }\n    }\n\n    return (\n      <div className=\"App\" style={{ justifyContent: \"center\", justifyItems: \"center\" }}>\n        {DialogComponent({\n          openState: this.state.openLoginWindow,\n          closeEvent: this.onUserClick,\n          title: \"Авторизация\",\n          description:\n            \"Укажите, пожалуйста, Ваш логин. Данный логин будет сохранен вместе с Вашими ответами.\",\n          secondDescription: \"\",\n          textFieldData: {\n            id: \"login\",\n            label: \"Логин\",\n            value: this.state.user,\n            textOnChange: this.onUpdateUser,\n            error: this.state.user.length === 0,\n          },\n          buttonOnClick: this.onUserClick,\n          buttonText: \"Сохранить\",\n        })}\n        <br></br>\n\n        {TitleComponent(survey.name, survey.description)}\n        <br></br>\n\n        <div>{items}</div>\n\n        <Button\n          className=\"Margin\"\n          variant=\"contained\"\n          onClick={this.onSubmit}\n          color=\"primary\"\n          size=\"large\"\n          \n        >\n          Завершить опрос\n        </Button>\n        <br></br>\n\n        {DialogComponent({\n          openState: this.state.openNotFinishedWindow,\n          closeEvent: this.setClose,\n          title: \"Опрос не завершен!\",\n          description:\n            this.state.items.length !== survey.items.length ||\n            this.state.items.findIndex((c) => {\n              return c.answer === null;\n            }) !== -1\n              ? \"Вы не ответили на вопросы: \" +\n                this.state.items\n                  .filter((c) => {\n                    return !c.isFinished && !c.checkBoxChecked;\n                  })\n                  .map((i) => i.id)\n                  .join(\", \")\n              : \"\",\n          secondDescription:\n            this.state.user.length === 0 ? \"Логин не указан\" : \"\",\n          buttonOnClick: this.setClose,\n          buttonText: \"Закрыть\",\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nexport default function TitleComponent(title: string, description: string) {\r\n  return (\r\n    <Container component={Box}>\r\n      <Box p={2} component={Paper} textAlign=\"center\">\r\n        <Typography variant=\"h3\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          {description}\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport \"./App.css\";\r\n\r\ntype textInputType = {\r\n  hasTextInput: boolean | undefined;\r\n  saveComment: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\ntype checkBoxDataType = {\r\n  addCheckBox: boolean | undefined;\r\n  isChecked: boolean | undefined;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport type radioButtonProps = {\r\n  title: string;\r\n  description: string;\r\n  questionId: string;\r\n  questionValueExpr: string | null | undefined;\r\n  onChangeEvent: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  radioOpts: any[];\r\n  textInput?: textInputType;\r\n  checkBoxData?: checkBoxDataType;\r\n};\r\n\r\nexport default function RadioButtonComponent(m: radioButtonProps) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {m.title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {m.description}\r\n          </Typography>\r\n          {m.checkBoxData && m.checkBoxData.addCheckBox ? (\r\n            <div>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={m.checkBoxData.isChecked}\r\n                    onChange={m.checkBoxData.onChange}\r\n                    name={m.questionId}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Пропустить данный вопрос\"\r\n              />\r\n              <br></br>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <label>\r\n            <RadioGroup\r\n              aria-label=\"radio\"\r\n              name={m.questionId}\r\n              value={m.questionValueExpr}\r\n              onChange={m.onChangeEvent}\r\n            >\r\n              {m.radioOpts}\r\n            </RadioGroup>\r\n          </label>\r\n          {m.textInput && m.textInput.hasTextInput ? (\r\n            <TextField\r\n              name={m.questionId}\r\n              label=\"Комментарий\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={m.textInput.saveComment}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport type textFieldComponentOpts = {\r\n    title: string,\r\n    description: string,\r\n    id: string,\r\n    onCommentChange: (e: any) => void,\r\n};\r\n\r\nexport default function TextFieldComponent(m: textFieldComponentOpts) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {m.title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {m.description}\r\n          </Typography>\r\n          <TextField\r\n            name={m.id}\r\n            label=\"Комментарий\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={m.onCommentChange}\r\n          />\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\ntype textInputType = {\r\n  hasTextInput: boolean | undefined;\r\n  saveComment: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\ntype checkBoxDataType = {\r\n  addCheckBox: boolean | undefined;\r\n  isChecked: boolean | undefined;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport type ratingComponentOpts = {\r\n  title: string;\r\n  description: string;\r\n  questionId: string;\r\n  currentValue: string | null | undefined;\r\n  onChangeEvent: (e: any) => void;\r\n  textInput?: textInputType;\r\n  checkBoxData?: checkBoxDataType;\r\n};\r\n\r\nexport default function RatingComponent(m: ratingComponentOpts) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper} alignItems=\"center\">\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {m.title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {m.description}\r\n          </Typography>\r\n          {m.checkBoxData && m.checkBoxData.addCheckBox ? (\r\n            <div>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={m.checkBoxData.isChecked}\r\n                    onChange={m.checkBoxData.onChange}\r\n                    name={m.questionId}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Пропустить данный вопрос\"\r\n              />\r\n              <br></br>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Rating\r\n            name={m.questionId}\r\n            value={Number(m.currentValue)}\r\n            size=\"large\"\r\n            onChange={m.onChangeEvent}\r\n          />\r\n          {m.textInput && m.textInput.hasTextInput ? (\r\n            <TextField\r\n              name={m.questionId}\r\n              label=\"Комментарий\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={m.textInput.saveComment}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}